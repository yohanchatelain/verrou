#!/usr/bin/env python3

# This file is part of Verrou, a FPU instrumentation tool.

# Copyright (C) 2014-2021 EDF
#   F. Févotte <francois.fevotte@edf.fr>
#   B. Lathuilière <bruno.lathuiliere@edf.fr>


# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307, USA.

# The GNU Lesser General Public License is contained in the file COPYING.

import sys
import re


def generateNargs(fileOut, fileNameTemplate, listOfBackend, listOfOp, nargs, post=""):

    templateStr = open(fileNameTemplate, "r", encoding='utf-8').readlines()

    FctNameRegExp = re.compile(r"(.*)FCTNAME\(([^,]*),([^)]*)\)(.*)")
    BckNameRegExp = re.compile(r"(.*)BACKENDFUNC\(([^)]*)\)(.*)")

    for backend in listOfBackend:
        for op in listOfOp.items():
            (op_vg, _) = op
            if nargs in [1, 2]:
                applyTemplate(fileOut, templateStr, FctNameRegExp,
                              BckNameRegExp, backend, op, post)
            if nargs == 3:
                sign = "-" if "msub" in op_vg else ""
                applyTemplate(fileOut, templateStr, FctNameRegExp,
                              BckNameRegExp, backend, op, post, sign)


def applyTemplate(fileOut, templateStr, FctRegExp, BckRegExp, backend, op, post, sign=None):
    (op_vg, op_backend) = op
    fileOut.write(f"// generation of operation {op_vg} backend {backend}\n")

    def fctName(typeVal, opt):
        fields = ["vr_", backend, post, op_vg, typeVal, opt]
        return "".join(fields)

    def bckName(typeVal):
        fields = ["interflop", backend, op_backend, typeVal]
        return "_".join(fields)

    def bckNamePost(typeVal):
        fields = ["interflop", post, op_backend, typeVal]
        return "_".join(fields)

    contextName = "_".join(["backend", backend, "context"])
    contextNamePost = "_".join(["backend", post, "context"])

    for line in templateStr:
        if "BACKENDGUARD" in line:
            line = line.replace("BACKENDGUARD", backend.upper())

        if "CONTEXT" in line:
            line = line.replace("CONTEXT", contextName)

        if "SIGN" in line:
            if sign is not None:
                line = line.replace("SIGN", sign)
            else:
                print("Generation failed")
                sys.exit()

        result = FctRegExp.match(line)

        if result is not None:
            res = result.group(1) + fctName(result.group(2),
                                            result.group(3)) + result.group(4)
            fileOut.write(res + "\n")
            continue

        result = BckRegExp.match(line)

        if result is not None:
            res = result.group(1) + bckName(result.group(2)) + result.group(3)
            fileOut.write(res + "\n")
            if post != "":
                res = result.group(
                    1) + bckNamePost(result.group(2)) + result.group(3)
                res = res.replace(contextName, contextNamePost)
                fileOut.write(res + "\n")
            continue

        fileOut.write(line)


def main():
    fileNameOutput = "vr_generated_from_templates.h"
    with open(fileNameOutput, "w", encoding='utf-8') as fileOut:
        fileOut.write("// Generated by %s\n" % (str(sys.argv)[1:-1]))

        backends = ["verrou", "mcaquad", "checkdenormal",
                    "vprec", "cancellation", "bitmask", "mcaint"]

        backends_with_checkfloatmax = ["verrou"]
        backends_with_checkcancellation = backends

        checkfloatmax = "checkfloatmax"
        checkcancellation = "checkcancellation"

        template1Args = "vr_interp_operator_template_cast.h"
        listOfOp1Args = {"cast": "cast"}
        generateNargs(fileOut, template1Args, backends, listOfOp1Args, 1)
        generateNargs(fileOut, template1Args, backends_with_checkfloatmax,
                      listOfOp1Args, 1, post=checkfloatmax)

        template2Args = "vr_interp_operator_template_2args.h"
        listOfOp2Args = {"add": "add", "sub": "sub",
                         "mul": "mul", "div": "div"}
        generateNargs(fileOut, template2Args, backends, listOfOp2Args, 2)
        generateNargs(fileOut, template2Args, backends_with_checkfloatmax,
                      listOfOp2Args, 2, post=checkfloatmax)

        listOfOp2Args = {"add": "add", "sub": "sub"}
        generateNargs(fileOut, template2Args, backends,
                      listOfOp2Args, 2, post=checkcancellation)

        template3Args = "vr_interp_operator_template_3args.h"
        listOfOp3Args = {"madd": "fma", "msub": "fma"}
        generateNargs(fileOut, template3Args, backends, listOfOp3Args, 3)
        generateNargs(fileOut, template3Args, backends_with_checkcancellation,
                      listOfOp3Args, 3, post=checkcancellation)
        generateNargs(fileOut, template3Args, backends_with_checkfloatmax,
                      listOfOp3Args, 3, post=checkfloatmax)


if __name__ == "__main__":
    main()
